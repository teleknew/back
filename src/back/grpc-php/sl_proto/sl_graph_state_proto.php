<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sl_graph_service.proto

/**
 * Protobuf type <code>sl_graph_state_proto</code>
 */
class sl_graph_state_proto
{
    /**
     * Generated from protobuf enum <code>sl_graph_runing = 0;</code>
     */
    const sl_graph_runing = 0;
    /**
     * Generated from protobuf enum <code>sl_graph_stoped = 1;</code>
     */
    const sl_graph_stoped = 1;
    /**
     * Generated from protobuf enum <code>sl_graph_parsing = 2;</code>
     */
    const sl_graph_parsing = 2;
    /**
     * Generated from protobuf enum <code>sl_graph_creating = 3;</code>
     */
    const sl_graph_creating = 3;
    /**
     * Generated from protobuf enum <code>sl_graph_deleting = 4;</code>
     */
    const sl_graph_deleting = 4;
    /**
     * Generated from protobuf enum <code>sl_graph_error = 5;</code>
     */
    const sl_graph_error = 5;
    /**
     * Generated from protobuf enum <code>sl_graph_stored = 6;</code>
     */
    const sl_graph_stored = 6;

    private static $valueToName = [
        self::sl_graph_runing => 'sl_graph_runing',
        self::sl_graph_stoped => 'sl_graph_stoped',
        self::sl_graph_parsing => 'sl_graph_parsing',
        self::sl_graph_creating => 'sl_graph_creating',
        self::sl_graph_deleting => 'sl_graph_deleting',
        self::sl_graph_error => 'sl_graph_error',
        self::sl_graph_stored => 'sl_graph_stored',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

