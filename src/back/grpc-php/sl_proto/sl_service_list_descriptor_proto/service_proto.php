<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sl_mpeg_ts.proto

namespace sl_service_list_descriptor_proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>sl_service_list_descriptor_proto.service_proto</code>
 */
class service_proto extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>uint32 service_id = 1;</code>
     */
    protected $service_id = 0;
    /**
     * Generated from protobuf field <code>uint32 service_type = 2;</code>
     */
    protected $service_type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $service_id
     *     @type int $service_type
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\SlMpegTs::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>uint32 service_id = 1;</code>
     * @return int
     */
    public function getServiceId()
    {
        return $this->service_id;
    }

    /**
     * Generated from protobuf field <code>uint32 service_id = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setServiceId($var)
    {
        GPBUtil::checkUint32($var);
        $this->service_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 service_type = 2;</code>
     * @return int
     */
    public function getServiceType()
    {
        return $this->service_type;
    }

    /**
     * Generated from protobuf field <code>uint32 service_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setServiceType($var)
    {
        GPBUtil::checkUint32($var);
        $this->service_type = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(service_proto::class, \sl_service_list_descriptor_proto_service_proto::class);

